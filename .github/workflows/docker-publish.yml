name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Version Bump
        id: bump_version
        run: |
          # Get the last commit message
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          
          # Default to patch version bump
          VERSION_BUMP="patch"
          
          # Check commit message for major or minor version bump
          if [[ "$COMMIT_MESSAGE" == *"BREAKING CHANGE"* ]]; then
            VERSION_BUMP="major"
          elif [[ "$COMMIT_MESSAGE" == *"feat:"* ]]; then
            VERSION_BUMP="minor"
          fi
          
          # Get current package.json version or start from 0.0.0
          CURRENT_VERSION=$(node -p "require('./package.json').version || '0.0.0'")
          
          # Use npm version to bump
          npm --no-git-tag-version version $VERSION_BUMP
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumping version to $NEW_VERSION (trigger: $VERSION_BUMP)"

  test-build-deploy:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: neemamwende/visualeditor:${{ needs.version.outputs.new_version }}
      
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Deploy to Vercel
        if: github.ref == 'refs/heads/main'
        run: |
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes

  release:
    needs: [version, test-build-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Build Project
        run: |
          npm ci
          npm run build
      
      - name: Zip Project
        run: |
          zip -r project.zip . -x '.git/*' 'node_modules/*' '.github/*'
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          release_name: Release ${{ needs.version.outputs.new_version }}
          draft: false
          prerelease: false
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./project.zip
          asset_name: project.zip
          asset_content_type: application/zip
      
      - name: Generate Changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}